@using BAP.Resources;
@using PagedList.Mvc;
@using BAP.UI.HtmlHelpers;
@using BAP.Web.Areas.Administration.Controllers;
@model BAP.Web.Areas.Administration.Models.BAPFileSystemData
@{
    bool isSelectMode = false;
    string mode = "";
    if (ViewBag.Mode != null && ViewBag.Mode == "Select")
    {
        mode = ViewBag.Mode;
        isSelectMode = true;
        Layout = "~/Areas/Administration/Views/Shared/_AdminLayoutNoHeaders.cshtml";
    }
    ViewBag.SideBarMinified = true;
    ViewBag.Title = Resources.EntityLabel_FileSystem;
}

@if (!isSelectMode)
{
    <!-- begin page-header -->
    <h1 class="page-header">@ViewBag.Title<small></small></h1>
    <!-- end page-header -->
}

<!-- begin row -->
<div class="row">
    <!-- begin col-12 -->
    <div class="col-md-12 ui-sortable">
        <!-- begin panel -->
        <div class="panel panel-inverse" data-sortable-id="tree-view-1">
            <div class="panel-heading">
                <div class="panel-heading-btn">
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-success" data-click="panel-reload"><i class="fa fa-repeat"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse"><i class="fa fa-minus"></i></a>
                </div>
                <h4 class="panel-title">@Resources.UIText_MediaResources</h4>
            </div>
            <div class="panel-body">
                <!--Begin Tree View-->
                <div class="col-md-3">
                    <form action="@Url.Action("FolderAction")" method="post">
                        <div class="input-group input-group-sm">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="actionType" id="actionType" />
                            <input type="hidden" id="sortOrder" name="sortOrder" value="@Model.CurrentFileSort" />
                            <input type="hidden" id="pageSize" name="pageSize" value="@Model.PageSize" />
                            <input type="hidden" id="currentFolder" name="currentFolder" value="@Model.CurrentFolder.FullRelativePath" />
                            <input type="hidden" id="currentFilter" name="currentFilter" value="@Model.CurrentFileFilter">

                            <input type="text" id="newFolderPath" name="newFolderPath" class="form-control" placeholder="new folder">
                            <div class="input-group-btn">
                                <button type="submit" class="btn btn-success" onclick="$('#actionType').val('create');"><i class="fa fa-plus"></i> <span>Create</span></button>
                                <button type="submit" class="btn btn-success" onclick="$('#actionType').val('delete');"><i class="glyphicon glyphicon-remove"></i> <span>Delete</span></button>
                            </div>
                        </div>
                    </form>
                    <div id="jstree-default" class="jstree jstree-1 jstree-default" role="tree" aria-multiselectable="true" tabindex="0" aria-activedescendant="j1_10" aria-busy="false">
                        @Html.BapFolderTreeView(Model, 1, mode)
                    </div>
                </div>

                <!--End of Tree View-->
                <!--Begin File List Table-->
                <div id="data-table_wrapper" class="dataTables_wrapper form-inline dt-bootstrap no-footer col-md-9">
                    @if (!isSelectMode)
                    {
                        <div class="dt-buttons btn-group">
                            <a class="btn btn-default buttons-html5 btn-sm" tabindex="0" aria-controls="data-table" onclick="Copy()"><i class="fa fa-copy"></i> <span>Copy</span></a>
                            <a class="btn btn-default buttons-html5 btn-sm" tabindex="0" aria-controls="data-table" onclick="Move()"><i class="fa fa-angle-double-left"></i> <span>Move</span></a>
                            <a class="btn btn-default buttons-html5 btn-sm" tabindex="0" aria-controls="data-table" data-confirm="Are you sure you want to delete?" href="javascript:Delete()"><i class="glyphicon glyphicon-remove"></i> <span>Delete</span></a>
                        </div>
                    }
                    <div id="data-table_filter" class="dataTables_filter">
                        <form action="@Url.Action("Index")">
                            <input type="hidden" id="sortOrder" name="sortOrder" value="@Model.CurrentFileSort" />
                            <input type="hidden" id="pageSize" name="pageSize" value="@Model.PageSize" />
                            <input type="hidden" id="currentFolder" name="currentFolder" value="@Model.CurrentFolder.FullRelativePath" />
                            <input type="search" id="currentFilter" name="currentFilter" class="form-control input-sm" placeholder="" aria-controls="data-table" value="@Model.CurrentFileFilter" />
                            <span>&nbsp;</span>
                            <button class="btn btn-default btn-sm" type="submit"><i class="fa fa-search"></i> <span>Search</span></button>
                        </form>
                    </div>
                    <table id="data-table" class="table table-striped table-bordered dataTable no-footer dtr-inline" role="grid" aria-describedby="data-table_info">
                        <thead>
                            <tr role="row">
                                <th class="" tabindex="0" aria-controls="data-table" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Check all files" style="width: 15px;"><input type="checkbox" id="check-all-rows" onchange="CheckAllChanged();" /></th>
                                <th onclick="window.location = '@Url.Action("Index", new { page = 1, sortOrder = "", currentFilter = Model.CurrentFileFilter, pageSize = Model.PageSize, currentFolder = Model.CurrentFolder.FullRelativePath })';" title="Default Sort Order" style="cursor:pointer;">
                                    @Resources.UIText_Actions
                                </th>
                                @Html.BapSortingHeaderFor(model => model.CurrentFolderFiles.First().Name, Model.SortData, Model.CurrentFileSort, "Index", "FileSystem", "Administration", Model.PageNumber, Model.CurrentFileFilter, pageSize: Model.PageSize, htmlAttributes: new { @style = "width: 631px;" }, routeParameters: new { @currentFolder = Model.CurrentFolder.FullRelativePath })
                                @Html.BapSortingHeaderFor(model => model.CurrentFolderFiles.First().Type, Model.SortData, Model.CurrentFileSort, "Index", "FileSystem", "Administration", Model.PageNumber, Model.CurrentFileFilter, pageSize: Model.PageSize, htmlAttributes: new { @style = "width: 100px;" }, routeParameters: new { @currentFolder = Model.CurrentFolder.FullRelativePath })
                                @Html.BapSortingHeaderFor(model => model.CurrentFolderFiles.First().Size, Model.SortData, Model.CurrentFileSort, "Index", "FileSystem", "Administration", Model.PageNumber, Model.CurrentFileFilter, pageSize: Model.PageSize, htmlAttributes: new { @style = "width: 100px;" }, routeParameters: new { @currentFolder = Model.CurrentFolder.FullRelativePath })
                                @Html.BapSortingHeaderFor(model => model.CurrentFolderFiles.First().LastModified, Model.SortData, Model.CurrentFileSort, "Index", "FileSystem", "Administration", Model.PageNumber, Model.CurrentFileFilter, pageSize: Model.PageSize, htmlAttributes: new { @style = "width: 150px;" }, routeParameters: new { @currentFolder = Model.CurrentFolder.FullRelativePath })
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.CurrentFolderFiles != null)
                            {
                                foreach (var file in Model.CurrentFolderFiles)
                                {
                                    var isAttachmentHistory = (file.FileInfo == null || !file.FileInfo.IsAttachmentHistory) ? "false" : "true";
                                    if (isSelectMode && isAttachmentHistory == "true")
                                    {
                                        continue;
                                    }

                                    <tr role="row">
                                        <td><input type="checkbox" id="checkRow" name="checkRow" class="check-row" value="0" file-name="@file.Name" file-path="@file.PathUrl" /></td>
                                        <td class="sorting_1" tabindex="0">
                                            @if (isSelectMode)
                                            {
                                                <a title="@Resources.UIText_Details" style="text-decoration: none;" href="javascript:FilePreview('@file.Name', '@file.Description', '@Url.Action("FileForAdmin", "Home", new { area = "", path = file.PathUrl })', '@file.MimeType', '@Url.Action("File", "Home", new { area = "", path = file.PathUrl })', @isAttachmentHistory)">
                                                    <i class="glyphicon glyphicon-th-list"></i>
                                                </a>
                                                <a title="@Resources.UIText_DropDown_SelectOption" style="text-decoration: none;" href="javascript:FileSelect('@file.PathUrl')">
                                                    <i class="glyphicon glyphicon-open-file"></i>
                                                </a>
                                            }
                                            else
                                            {
                                                <a title="@Resources.UIText_Details" style="text-decoration: none;" href="javascript:FilePreview('@file.Name', '@file.Description', '@Url.Action("FileForAdmin", "Home", new { area = "", path = file.PathUrl })', '@file.MimeType', '@Url.Action("File", "Home", new { area = "", path = file.PathUrl })', @isAttachmentHistory)">
                                                    <i class="glyphicon glyphicon-th-list"></i>
                                                </a>
                                                if (file.FileInfo == null || !file.FileInfo.IsAttachmentHistory)
                                                {
                                                    <a title="@Resources.UIText_Delete" style="text-decoration: none;" data-confirm="Are you sure you want to delete?" href="@Url.Action("Delete", new {path=file.PathUrl, page = Model.PageNumber, pageSize = Model.PageSize, sortOrder = Model.CurrentFileSort, currentFilter = Model.CurrentFileFilter, currentFolder = Model.CurrentFolder.FullRelativePath})">
                                                        <i class="glyphicon glyphicon-remove"></i>
                                                    </a>
                                                    <a title="@Resources.UIText_Upload" style="text-decoration: none;" href="@Url.Action("Upload", new {path=file.PathUrl})">
                                                        <i class="fa fa-upload"></i>
                                                    </a>
                                                }
                                            }
                                        </td>
                                        <td title="@file.PathUrl">
                                            @if (isSelectMode)
                                            {
                                                <a href="javascript:FilePreview('@file.Name', '@file.Description', '@Url.Action("File", "Home", new { area = "", path = file.PathUrl })', '@file.MimeType', '@Url.Action("File", "Home", new { area = "", path = file.PathUrl })', false)" title="Preview file" target="_blank">@Html.DisplayFor(modelItem => file.Name)</a>
                                            }
                                            else
                                            {
                                                <a href="@Url.Action("FileForAdmin", "Home", new { Area = "", path = file.PathUrl })" title="Download file" target="_blank">@Html.DisplayFor(modelItem => file.Name)</a>
                                            }
                                        </td>
                                        <td>@Html.DisplayFor(modelItem => file.Type)</td>
                                        <td title="@file.Size bytes">@string.Format("{0:0.00} kB", ((float)file.Size) / 1024)</td>
                                        <td>@Html.DisplayFor(modelItem => file.LastModified)</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6">
                                        <h5>No files found in this folder</h5>
                                    </td>
                                </tr>

                            }
                        </tbody>
                    </table>
                    <div class="row row-space-0 m-b-5">
                        <div class="dataTables_info" id="data-table_info" role="status" aria-live="polite">
                            @if (Model.TotalItemCount > 5)
                            {
                                <span>Files per page </span>
                                <select id="data-table-length" name="data-table_length" aria-controls="data-table" class="form-control input-sm" onchange="OnpageSizeChange('@mode')">
                                    <option value="5" @(Model.PageSize == 5 ? "selected" : "")>5</option>
                                    <option value="10" @(Model.PageSize == 10 ? "selected" : "")>10</option>
                                    <option value="15" @(Model.PageSize == 15 ? "selected" : "")>15</option>
                                    <option value="20" @(Model.PageSize == 20 ? "selected" : "")>20</option>
                                    <option value="50" @(Model.PageSize == 50 ? "selected" : "")>50</option>
                                    <option value="100" @(Model.PageSize == 100 ? "selected" : "")>100</option>
                                </select><span>&nbsp;</span>
                            }
                            @if (Model.PageCount > 1)
                            {
                                <span>Showing page </span>@(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)<span> of </span>@Model.PageCount
                            }
                        </div>
                        <div class="dataTables_paginate paging_simple_numbers" id="data-table_paginate">
                            @if (Model.PageCount > 1)
                            {
                                @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = Model.CurrentFileSort, currentFilter = Model.CurrentFileFilter, pageSize = Model.PageSize, currentFolder = Model.CurrentFolder.FullRelativePath, mode = mode }))
                            }
                        </div>
                    </div>

                    <div id="dropzone" class="row row-space-0">
                        <form action="@Url.Action("FileUpload")" class="dropzone needsclick dz-clickable" id="dropzoneForm" method="post">
                            <input type="hidden" id="currentFolder" name="currentFolder" value="@Model.CurrentFolder.FullRelativePath" />
                            <div class="dz-message needsclick">
                                Drop files here or click to upload.
                            </div>
                        </form>
                    </div>

                </div>
                <!--End of File List Table-->

            </div>
        </div>
    </div>
</div>

<div id="FilePreviewModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <input type="text" style="width:0px;height:0px;position:absolute;left:10px;top:10px;z-index:-10;" id="FocusControl" /><button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title" id="ModalTitle">File Information</h4>
            </div>
            <div class="modal-body">
                <div class="media media-lg">
                    <div class="media-left">
                        <object id="PreviewObject" class="media-object" type="application/pdf"></object>
                    </div>
                    <div class="media-body">
                        <h4 class="media-heading">File details</h4>
                        <a href="#" id="FileUrl" target="_blank">
                            <p id="FileDescription">Some text in the modal.</p>
                        </a>
                        <p id="HistoryNote"><i><b>Note:</b> this file is from attachment history, its link cannot be used directly in content</i></p>
                    </div>
                </div>
                <span id="hdnUrl" style="display:none;"></span>
            </div>

            <div class="modal-footer">
                <button class="btn btn-default m-r-5 m-b-5" type="button" onclick="CopyUrl()" id="btnCopyClipboard">Copy link to clipboard</button>
                <button type="button" class="btn btn-info m-r-5 m-b-5" data-dismiss="modal">@Resources.UIText_Ok</button>
            </div>
        </div>
    </div>
</div>

<div id="SelectTargetModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title" id="SelectTargetModalTitle"></h4>
            </div>
            <div class="modal-body">
                <div id="jstree-folder" class="jstree jstree-322 jstree-default" role="tree" aria-multiselectable="true" tabindex="0" aria-activedescendant="j1_10" aria-busy="false">
                    @Html.BapFolderTreeView(Model, 2)
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default m-r-5 m-b-5" data-dismiss="modal">Cancel</button>
                <button id="btnOk" type="button" class="btn btn-info m-r-5 m-b-5">@Resources.UIText_Ok</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        function OnpageSizeChange(mode) {
            var url = '@Url.Action("Index", new {page = 1, sortOrder = Model.CurrentFileSort, currentFilter = Model.CurrentFileFilter, currentFolder = Model.CurrentFolder.FullRelativePath})';
            url = url.replace(new RegExp('&amp;', 'g'), '&');
            url += "&mode=" + mode;
            url += "&pageSize=" + $('#data-table-length').val();
            window.location = url;
        }

        function CheckAllChanged() {
            $('.check-row').prop("checked", $('#check-all-rows').is(':checked'));
        }

        function FilePreview(name, description, url, type, link, isAttachmentHistory) {
            var opt = {
                show: true,
                keyboard: true
            };
            if (isAttachmentHistory) {
                $("#btnCopyClipboard").hide();
                $("#HistoryNote").show();
            } else {
                $("#btnCopyClipboard").show();
                $("#HistoryNote").hide();
            }
            $("#hdnUrl").text(link);
            $("#ModalTitle").text(name);
            $("#FileUrl").prop("href", url);
            $("#FileDescription").text(description);
            $("#PreviewObject").prop("type", type);
            $("#PreviewObject").prop("data", url);
            $("#FilePreviewModal").modal(opt);
        }

        function FileSelect(url) {
            window.parent.ChooseFileFromModal('/file/' + url);
        }

        function CopyUrl() {
            copyToClipboard(document.getElementById("hdnUrl"));
        }

        function getChecked(attribute) {
            var checked = $("#checkRow:checked");
            var path = [];
            for (var i = 0; i < checked.length; i++) {
                path.push($(checked[i]).attr(attribute));
            }
            return path;
        }

        function Process(url) {
            var selected = $("#jstree-folder").jstree("get_selected", true);
            if (selected) {
                var target = selected[0].data.pathUrl;
                var path = getChecked("file-path");
                $.ajax({
                        method: "GET",
                        url: url,
                        data: {
                            "target": target,
                            "path": path.join(","),
                            "page": 1,
                            "pageSize": @Model.PageSize,
                            "sortOrder": "@Model.CurrentFileSort",
                            "currentFilter": "@Model.CurrentFileFilter",
                            "currentFolder": "@Model.CurrentFolder.FullRelativePath"
                        }
                    })
                    .done(function (data, status, xhr) {
                        alert('Processed ' + path.length + ' files');
                        var url = '@Url.Action("Index", new { page = 1, pageSize = Model.PageSize, sortOrder = Model.CurrentFileSort, currentFilter = Model.CurrentFileFilter })&currentFolder=' + target;
                        url = url.replace(new RegExp('&amp;', 'g'), '&');
                        setTimeout(() => window.location = url, 2000);
                    });
            }
        }

        function Copy() {
            var opt = {
                show: true,
                keyboard: true
            };
            var names = getChecked("file-name");
            $("#SelectTargetModalTitle").html("Copy " + names);
            $("#SelectTargetModal #btnOk").on("click", () => Process('@Url.Action("Copy")'));
            $("#SelectTargetModal").modal(opt);
        }

        function Move() {
            var opt = {
                show: true,
                keyboard: true
            };
            var names = getChecked("file-name");
            $("#SelectTargetModalTitle").html("Move " + names.join(","));
            $("#SelectTargetModal #btnOk").on("click", () => Process('@Url.Action("Move")'));
            $("#SelectTargetModal").modal(opt);
        }

        function Delete() {
            var path = getChecked("file-path");
            $.ajax({
                    method: "GET",
                    url: "@Url.Action("Delete")",
                    data: {
                        "path": path.join(","),
                        "page": 1,
                        "pageSize": @Model.PageSize,
                        "sortOrder": "@Model.CurrentFileSort",
                        "currentFilter": "@Model.CurrentFileFilter",
                        "currentFolder": "@Model.CurrentFolder.FullRelativePath"
                    }
                })
                .done(function(data, status, xhr) {
                    var url =
                        '@Url.Action("Index", new
                         {
                             page = 1, pageSize = Model.PageSize, sortOrder = Model.CurrentFileSort,
                             currentFilter = Model.CurrentFileFilter, currentFolder = Model.CurrentFolder.FullRelativePath
                         })';
                    url = url.replace(new RegExp('&amp;', 'g'), '&');
                    window.location = url;
                });
        }

        $(document).ready(function() {
            $('#FilePreviewModal').on('shown.bs.modal',
                function() {
                    $('#FocusControl').focus();
                    $('#FocusControl').select();
                });
        });

        Dropzone.options.dropzoneForm = {
            init: function() {
                this.on("complete",
                    function(data) {
                        var res = JSON.parse(data.xhr.responseText);
                        if (!res.Success) {
                            alert(res.Message, "Error");
                        } else {
                            location.reload();
                        }
                    });
            }
        };
    </script>

}