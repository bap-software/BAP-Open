@using BAP.DAL;
@using BAP.Common;
@using BAP.Resources;
@using BAP.UI.HtmlHelpers
@using BAP.Lookups
@model BAP.DAL.Entities.OrganizationUser

@{
    ILookupEngine engine = ViewBag.LookupEngineInstance;
    IConfigHelper settings = ViewBag.ConfigHelperInstance;
    IAuthorizationContext authContext = ViewBag.AuthContextInstance;
}
<legend>@Resources.UIText_BasicSettings</legend>

<div class="form-group">
    @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>
    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email" } })
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
    </div>    
</div>

<div class="form-group">
    @Html.LabelFor(model => model.AddressLine2, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.BapCountryListFor(model => model.Country, new { @class = "form-control", onchange = "fillStates()" })
    </div>
    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.BapStateListFor(model => model.State, Model.Country, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.County, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.County, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.County, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.CellNumber, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.EditorFor(model => model.CellNumber, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.CellNumber, "", new { @class = "text-danger" })
    </div>
</div>

@if (Model != null && !string.IsNullOrEmpty(Model.Email) && Html.IsAdmin(settings, authContext))
{
    var strRoles = string.Empty;
    foreach (var role in Model.Roles)
    {
        if (!string.IsNullOrEmpty(strRoles))
        {
            strRoles += ", ";
        }
        strRoles += role;
    }
<hr />
<legend>System</legend>
<div class="form-group">
    <label class="control-label col-md-2">@Resources.FieldLabel_OrganizationUser_Roles</label>
    <div class="col-md-4">
        @strRoles
    </div>
    @Html.LabelFor(model => model.EmailConfirmed, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">                
        @Html.CheckBoxFor(model => model.EmailConfirmed, new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.TwoFactorEnabled, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.CheckBoxFor(model => model.TwoFactorEnabled, new { htmlAttributes = new { @class = "form-control" } })
    </div>
    @Html.LabelFor(model => model.LockoutEnabled, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.CheckBoxFor(model => model.LockoutEnabled, new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.LockoutEndDateUtc, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.DisplayFor(model => model.LockoutEndDateUtc)
    </div>
    @Html.LabelFor(model => model.AccessFailedCount, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-4">
        @Html.DisplayWithIdFor(model => model.AccessFailedCount, "span")
        @Html.HiddenFor(model => model.AccessFailedCount)
        <button class="btn btn-default btn-warning" type="button" id="ResetAccessFailedCount">Reset</button>
    </div>
</div>
<input type="hidden" id="EditFormFlag" name="EditFormFlag" value="1" />
}

<script language="JavaScript" type="text/javascript">
    $(document).ready(function () {        
        $("#ResetAccessFailedCount").click(function () {
            $('span#AccessFailedCount').text('0');
            $('input#AccessFailedCount').val(0);
        });        
    });
</script>