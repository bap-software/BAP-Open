<#@ template language="C#"  HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="EnvDTE.CodeType" name="ModelType" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name="PrimaryKeyName" #>
<#@ parameter type="System.String" name="PrimaryKeyShortTypeName" #>
<#@ parameter type="System.String" name="PrimaryKeyType" #>
<#@ parameter type="System.String" name="NameSpace" #>

<#
    string bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);                
    var primaryKeyNullableTypeName = GetNullableTypeName(PrimaryKeyType, PrimaryKeyShortTypeName);
#>
/// This code was generated by BAP BL Custom Scaffolder.
using System;
using System.Net;
using System.Web.Mvc;

using BAP.Common;
using BAP.Lookups;
using BAP.Log;
using BAP.DAL.Entities;
using BAP.BL;
using BAP.UI.Controllers;
using BAP.FileSystem;
using BAP.DAL;

<#
    if(ModelType.Namespace.FullName != "BAP.DAL")
    {
#>
using <#= ModelType.Namespace.FullName #>;
<#
    }
#>
using BAP.eCommerce.BL;

namespace <#= NameSpace #>
{
    [Authorize(Roles = "Administrator,User")]
    public class <#= ControllerName #>Controller : BaseController<<#= ModelType.Name #>>
    {
		private readonly I<#= ModelTypeName #>BL _bl;
        private readonly IFileProcessor _fileProcessor;

		public <#= ControllerName #>Controller(ILogger logger, IConfigHelper configHelper, IFileProcessor fileProc, ILookupEngine lookupEngine, IAuthorizationContext context) :
            base(logger, configHelper, lookupEngine, context, new AuthorizationHelper<<#= ModelTypeName #>>(configHelper, context))
        {
            _fileProcessor = fileProc;
            _bl = new eCommerceBusinessLayer(lookupEngine, fileProc, configHelper, context, logger);
        }


		// GET: <#= ControllerRootName #>/AdminIndex     
        public ActionResult AdminIndex(string sortOrder, string currentFilter, string searchString, int? page, int? pageSize)
        {            
			int pageNumber = page ?? 1;
            int rowsPerPage = GetRealPageSize(pageSize);

            InitIndexViewData(sortOrder, currentFilter);

            return View(_bl.Search<#= ModelTypeName #>s(searchString, sortOrder, pageNumber, rowsPerPage));
        }

        // GET: <#= ControllerRootName #>/AdminDetails/5       
        public ActionResult AdminDetails(int id)
        {                        
            <#= ModelTypeName #> <#= ModelVariable #> = _bl.Get<#= ModelTypeName #>ById(id);
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= ModelVariable #>);
        }        

		// GET: <#= ControllerRootName #>
        [AllowAnonymous]
        public ActionResult Index(string sortOrder, string currentFilter, string searchString, int? page, int? pageSize)
        {
            int pageNumber = page ?? 1;
            int rowsPerPage = GetRealPageSize(pageSize);

            InitIndexViewData(sortOrder, currentFilter);

            return View(_bl.Search<#= ModelTypeName #>s(searchString, sortOrder, pageNumber, rowsPerPage));
        }

		// GET: <#= ControllerRootName #>/Details/5
        [AllowAnonymous]
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= ModelTypeName #> <#= ModelVariable #> = _bl.Get<#= ModelTypeName #>ById(id.Value);
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= ModelVariable #>);
        }

		// GET: <#= ControllerRootName #>/Create
        public ActionResult Create()
        {            
            return View();
        }

        // POST: <#= ControllerRootName #>/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                _bl.Add<#= ModelTypeName #>(<#= ModelVariable #>);
				return RedirectToAction("AdminIndex");
            }
            
            return View(<#= ModelVariable #>);
        }

        // GET: <#= ControllerRootName #>/Edit/5
        public ActionResult Edit(<#= primaryKeyNullableTypeName #> id)
        {            
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= ModelTypeName #> <#= ModelVariable #> = _bl.Get<#= ModelTypeName #>ById(id.Value);
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }            

            return View(<#= ModelVariable #>);
        }

        // POST: <#= ControllerRootName #>/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                _bl.Update<#= ModelTypeName #>(<#= ModelVariable #>);
				return RedirectToAction("AdminIndex");
            }
            
            return View(<#= ModelVariable #>);
        }
        
        // GET: <#= ControllerRootName #>/Delete/5
        public ActionResult Delete(<#= primaryKeyNullableTypeName #> id)
        {            
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= ModelTypeName #> <#= ModelVariable #> = _bl.Get<#= ModelTypeName #>ById(id.Value);
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }            

            return View(<#= ModelVariable #>);
        }
        
        // POST: <#= ControllerRootName #>/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(<#= PrimaryKeyShortTypeName #> id)
        {
            <#= ModelTypeName #> <#= ModelVariable #> = _bl.Get<#= ModelTypeName #>ById(id);
            _bl.Remove<#= ModelTypeName #>(<#= ModelVariable #>);
            return RedirectToAction("AdminIndex");
        }
        
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
			    ((IDisposable)_bl).Dispose();			
            }
            base.Dispose(disposing);
        }
    }
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type PrimaryKeyType = null;
        try
        {
            PrimaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (PrimaryKeyType != null && (PrimaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>