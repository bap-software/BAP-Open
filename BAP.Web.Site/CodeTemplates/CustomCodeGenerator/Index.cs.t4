<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="EnvDTE.CodeType" name="ModelType" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelTypeFullName" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name="PrimaryKeyName" #>
<#@ parameter type="System.String" name="PrimaryKeyShortTypeName" #>
<#@ parameter type="System.String" name="PrimaryKeyType" #>
<#@ parameter type="System.String" name="NameSpace" #>
<#@ parameter type="System.String" name="LayoutPath" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.PropertyMetadata[]" name="Properties" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.PropertyMetadata[]" name="PrimaryKeys" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, Microsoft.AspNet.Scaffolding.Core.Metadata.RelatedModelMetadata>" name="RelatedModels" #>
@using BAP.Resources
@using PagedList.Mvc;
@using BAP.Common;
@using BAP.Lookups
@using BAP.eCommerce.Resources
@model PagedList.IPagedList<#= "<" + ModelTypeFullName + ">" #>
@{    
    Layout = "<#=LayoutPath #>";
	ViewBag.Title = ResObject.EntityLabel_<#=ModelTypeName #>;	        
}

<!-- LIGHT SECTION -->
<section class="lightSection clearfix pageHeader">
    <div class="container">
        <div class="row">
            <div class="col-xs-6">
                <div class="page-title">
                    <h2>@ViewBag.Title</h2>
                </div>
            </div>
            <div class="col-xs-6">
                <ol class="breadcrumb pull-right">
                    <li>
                        <a href="@Url.Action("Index", "Home")">@Resources.UIText_HomePage</a>
                    </li>
                    <li class="active">@ViewBag.Title</li>                    
                </ol>
            </div>
        </div>
    </div>
</section>


<!-- MAIN CONTENT SECTION-->
<section>
    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <div>
                    <table class="table">
                        <tr>
		                    <th>@Resources.UIText_Actions</th>
<#
string boolType = "System.Boolean";
bool isControlHtmlAttributesSupported = true;
List<string> bypassFields = new List<string>(){"OwnerGroup", "OwnerPermissions", "CreatedBy", "LastModifiedBy", "CreateDate", "LastModifiedDate", "TenantUnit", "TenantUnitId", "TimeStamp", "CreatedByUserName", "LastModifiedByUserName"};

    foreach (PropertyMetadata property in Properties) {
        // Initial basic check of the properties
        if (!(property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation)) 
        {
            continue;
        }

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) 
        {
            continue;
        }

        //Bypass certain properties:
        if(bypassFields.Any(f => f == property.PropertyName))
        {
            continue;
        }
#>                        
                            <th>
                                @Html.DisplayNameFor(model => model.First().<#= property.PropertyName #>)
                            </th>
<#
    }        
#>
                        </tr>
                    @foreach (var item in Model) {
                        <tr>
<#
string pkName = GetPrimaryKeyName(PrimaryKeys);
if (pkName != null) {
#>
                            <td>
			                    <a title="@Resources.UIText_Details" style="text-decoration: none;" href="@Url.Action("Details", new {id=item.<#= pkName #>})">
                                    <i class="fa fa-info-circle" aria-hidden="true"></i>
                                </a>
                                <a title="@Resources.UIText_Edit" style="text-decoration: none;" href="@Url.Action("Edit", new {id=item.<#= pkName #>})">
                                    <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                                </a>
                                <a title="@Resources.UIText_Delete" style="text-decoration: none;" href="@Url.Action("Delete", new {id=item.<#= pkName #>})">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </a>            
                            </td>
<#
} else {
#>
                            <td>
			                    <a title="@Resources.UIText_Details" style="text-decoration: none;" href="@Url.Action("Details", new {/* id=item.PrimaryKey */})">
                                    <i class="fa fa-info-circle" aria-hidden="true"></i>
                                </a>
                                <a title="@Resources.UIText_Edit" style="text-decoration: none;" href="@Url.Action("Edit", new {/* id=item.PrimaryKey */})">
                                    <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                                </a>
                                <a title="@Resources.UIText_Delete" style="text-decoration: none;" href="@Url.Action("Delete", new {/* id=item.PrimaryKey */})">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </a>                 
                            </td>
<#
}
    foreach (PropertyMetadata property in Properties) {
        // Initial basic check of the properties
        if (!(property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation)) 
        {
            continue;
        }

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) 
        {
            continue;
        }

        //Bypass certain properties:
        if(bypassFields.Any(f => f == property.PropertyName))
        {
            continue;
        }
#>                        
                            <td>
                                @Html.DisplayFor(modelItem => item.<#= property.PropertyName #>)
                            </td>
<#
    }        
#>
                        </tr>
                    }        
                    </table>
                    @if (Model.PageCount > 1)
                    {
                        <hr />
                        <span>Page </span>@(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)<span> of </span>@Model.PageCount
                        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                    }  
                </div>
            </div>
        </div>
    </div>
</section>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>