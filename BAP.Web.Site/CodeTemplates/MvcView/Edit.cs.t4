<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@using BAP.Resources
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = Resources.UIText_<#= ViewName#>;
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

@section featured {
    <section class="featured-section edit">
        <div class="container">
            <div class="clearfix">
                <h1 class="page-title"><span>@ViewBag.Title @Resources.EntityLabel_<#= ViewDataTypeShortName #> </span></h1>
                <p>
                    <a href="@Url.Action("Index")"><i class="glyphicon glyphicon-hand-left"></i>@Resources.UIText_Back</a> |
                    <a href="javascript:window.print()"><i class="fa fa-print"></i> @Resources.UIText_Print</a>
                </p>
            </div>
        </div>
    </section>
}

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <section class="edit-box">
    <div class="form-horizontal">        
<# 
    if (isControlHtmlAttributesSupported) {
#>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
    } else {
#>
        @Html.ValidationSummary(true)
<#      
    }
#>
	@Html.HiddenFor(model => model.CreatedBy)
    @Html.HiddenFor(model => model.LastModifiedBy)
    @Html.HiddenFor(model => model.TenantUnit)
    @Html.HiddenFor(model => model.TenantUnitId)
	@Html.HiddenFor(model => model.OwnerGroup)
    @Html.HiddenFor(model => model.OwnerPermissions)

	<!--Use this partial view instead of edit fields below if partial view is created -->
	@*Html.Partial("_EditFields")*@

<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
	//Bypass certain properties:
	if(property.PropertyName == "CreatedBy" || property.PropertyName == "LastModifiedBy" ||
			property.PropertyName == "CreateDate" || property.PropertyName == "LastModifiedDate" 
			|| property.PropertyName == "TenantUnit" || property.PropertyName == "TenantUnitId"
			|| property.PropertyName == "TimeStamp" || property.PropertyName == "CreatedByUserName" || property.PropertyName == "LastModifiedByUserName" 
			|| property.PropertyName == "OwnerGroup" || property.PropertyName == "OwnerPermissions")
        {
			continue;
		}

    if (property.Scaffold && !property.IsAssociation) {
        if (property.IsPrimaryKey) {
#>
        @Html.HiddenFor(model => model.<#= property.PropertyName #>)

<#
        } else if (!property.IsReadOnly) {
#>
        <div class="form-group">
            <div class="col-md-2">
<#  
            if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label" })
<#
            } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label" })
<#
            }
#>
            </div>
            <div class="col-md-10">
<#
            bool isCheckbox = property.TypeName.Equals(boolType);
            if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
            } else  if (isControlHtmlAttributesSupported) {
                if (isCheckbox) {
#>
                <div class="checkbox">
<#
                    PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
                } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
                } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
                }
            } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            }
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
            } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
            }
#>
<#
            if (isCheckbox && isControlHtmlAttributesSupported) {
                PopIndent();
#>
                </div>
<#
            }
#>
            </div>
        </div>

<#
        }
    }
}
#>

		<!-- Read-only system fields -->
		<div class="form-group">
                <div class="col-md-2">@Html.LabelFor(model => model.CreateDate, htmlAttributes: new { @class = "control-label" })</div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">@Html.LabelFor(model => model.CreatedByUserName, htmlAttributes: new { @class = "control-label" })</div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreatedByUserName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">@Html.LabelFor(model => model.LastModifiedDate, htmlAttributes: new { @class = "control-label" })</div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LastModifiedDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>
			
            <div class="form-group">
                <div class="col-md-2">@Html.LabelFor(model => model.LastModifiedByUserName, htmlAttributes: new { @class = "control-label" })</div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LastModifiedByUserName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>
			<!-- End of read-only system fields -->

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@Resources.UIText_Save" class="btn btn-default btn-primary" />
            </div>
        </div>
    </div>
	</section>
}

<#
if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>