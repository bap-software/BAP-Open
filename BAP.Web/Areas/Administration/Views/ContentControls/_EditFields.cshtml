@using BAP.Lookups
@using BAP.UI.HtmlHelpers
@model BAP.DAL.Entities.ContentControl
@{
    ILookupEngine engine = ViewBag.LookupEngineInstance;
}

<div class="form-group">
    @Html.LabelFor(model => model.Name, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter name" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.Description, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @placeholder = "Description" } })
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.ContentControlType, DisplayOptions.Humanize, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.BapParentDropDownFor(model => model.ContentControlType, engine, "Id", "Name", "Description", new { @class = "form-control" }, "ContentControlTypeId")
        @Html.ValidationMessageFor(model => model.ContentControlType, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.ContentHolderFieldId, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.ContentHolderFieldId, new { htmlAttributes = new { @class = "form-control", @placeholder = "Content holder control Id" } })
        @Html.ValidationMessageFor(model => model.ContentHolderFieldId, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.DisplayName, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter name" } })
        @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.ContainerTag, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.ContainerTag, new { htmlAttributes = new { @class = "form-control", @placeholder = "HTML tag" } })
        @Html.ValidationMessageFor(model => model.ContainerTag, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.MainCss, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.MainCss, new { htmlAttributes = new { @class = "form-control", @placeholder = "CSS class" } })
        @Html.ValidationMessageFor(model => model.MainCss, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.IconCss, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.IconCss, new { htmlAttributes = new { @class = "form-control", @placeholder = "CSS class" } })
        @Html.ValidationMessageFor(model => model.IconCss, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.HasDialog, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-2 col-sm-2">
        @Html.EditorFor(model => model.HasDialog, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.HasDialog, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.HasCKEditor, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-2 col-sm-2">
        @Html.EditorFor(model => model.HasCKEditor, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.HasCKEditor, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.IsEnabled, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-2 col-sm-2">
        @Html.EditorFor(model => model.IsEnabled, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.IsEnabled, "", new { @class = "text-danger" })
    </div>
</div>


<div class="form-group">
    <div class="col-md-6 col-sm-6">
        @Html.LabelFor(model => model.DialogContent, DisplayOptions.Humanize, new { @class = "control-label" })
        @Html.TextAreaFor(model => model.DialogContent, htmlAttributes: new { @class = "ckeditor", @placeholder = "HTML content used by modal popup" })
        @Html.ValidationMessageFor(model => model.DialogContent, "", new { @class = "text-danger" })
    </div>
    <div class="col-md-6 col-sm-6">
        @Html.LabelFor(model => model.JavaScriptContent, DisplayOptions.Humanize, new { @class = "control-label" })
        @Html.TextAreaFor(model => model.JavaScriptContent, htmlAttributes: new { @class = "form-control", @placeholder = "JavaScript used by popup to push data", @rows = "16" })
        @Html.ValidationMessageFor(model => model.JavaScriptContent, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    <div class="col-md-6 col-sm-6">
        @Html.LabelFor(model => model.ContentBefore, DisplayOptions.Humanize, new { @class = "control-label" })
        @Html.TextAreaFor(model => model.ContentBefore, htmlAttributes: new { @class = "ckeditor", @placeholder = "HTML content before control" })
        @Html.ValidationMessageFor(model => model.ContentBefore, "", new { @class = "text-danger" })
    </div>

    <div class="col-md-6 col-sm-6">
        @Html.LabelFor(model => model.ContentAfter, DisplayOptions.Humanize, new { @class = "control-label" })
        @Html.TextAreaFor(model => model.ContentAfter, htmlAttributes: new { @class = "ckeditor", @placeholder = "HTML content after control" })
        @Html.ValidationMessageFor(model => model.ContentAfter, "", new { @class = "text-danger" })
    </div>
</div>





