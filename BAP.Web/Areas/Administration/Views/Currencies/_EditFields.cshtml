@using BAP.UI.HtmlHelpers
@model BAP.DAL.Entities.Currency


<div class="form-group">          
    @Html.LabelFor(model => model.Symbol, DisplayOptions.Humanize, new { @class="control-label col-md-2 col-sm-2"})        
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.Symbol, new { htmlAttributes = new { @class = "form-control", @placeholder="Enter currency symbol" } })
        @Html.ValidationMessageFor(model => model.Symbol, "", new { @class = "text-danger" })
    </div>              
    @Html.LabelFor(model => model.ThreeLetterCode, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.BapCurrencyListFor(model => model.ThreeLetterCode, new { @class = "form-control", @placeholder="Enter code"})            
        @Html.ValidationMessageFor(model => model.ThreeLetterCode, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Name, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })       
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter name" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>       
    @Html.LabelFor(model => model.Description, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })       
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @placeholder = "Description" } })
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">        
    @Html.LabelFor(model => model.ExchangeRate, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })        
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.ExchangeRate, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ExchangeRate, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.FormatString, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-3 col-sm-3">
        @Html.EditorFor(model => model.FormatString, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.FormatString, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.RoundTo, DisplayOptions.Humanize, new { @class = "control-label col-md-2 col-sm-2" })
    <div class="col-md-1 col-sm-1">
        @Html.EditorFor(model => model.RoundTo, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.RoundTo, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.IsMain, DisplayOptions.Humanize, new { @class = "control-label col-md-1 col-sm-1" })
    <div class="col-md-2 col-sm-2">
        @Html.EditorFor(model => model.IsMain, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.IsMain, "", new { @class = "text-danger" })
    </div>
    @Html.LabelFor(model => model.IsEnabled, DisplayOptions.Humanize, new { @class = "control-label col-md-1 col-sm-1" })
    <div class="col-md-1 col-sm-1">
        @Html.EditorFor(model => model.IsEnabled, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.IsEnabled, "", new { @class = "text-danger" })
    </div>
</div>


