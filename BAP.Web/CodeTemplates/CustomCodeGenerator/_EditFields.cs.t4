<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="EnvDTE.CodeType" name="ModelType" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelTypeFullName" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name="PrimaryKeyName" #>
<#@ parameter type="System.String" name="PrimaryKeyShortTypeName" #>
<#@ parameter type="System.String" name="PrimaryKeyType" #>
<#@ parameter type="System.String" name="NameSpace" #>
<#@ parameter type="System.String" name="LayoutPath" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.PropertyMetadata[]" name="Properties" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.PropertyMetadata[]" name="PrimaryKeys" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, Microsoft.AspNet.Scaffolding.Core.Metadata.RelatedModelMetadata>" name="RelatedModels" #>
@using BAP.Resources
@using BAP.UI.HtmlHelpers
@using BAP.Lookups
@model <#=ModelTypeFullName #>

@{
    ILookupEngine engine = ViewBag.LookupEngineInstance;
}

<#
string boolType = "System.Boolean";
bool isControlHtmlAttributesSupported = true;
List<string> bypassFields = new List<string>(){"OwnerGroup", "OwnerPermissions", "CreatedBy", "LastModifiedBy", "CreateDate", "LastModifiedDate", "TenantUnit", "TenantUnitId", "TimeStamp", "CreatedByUserName", "LastModifiedByUserName"};

foreach (PropertyMetadata property in Properties) {
        // Initial basic check of the properties
        if (!(property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation)) 
        {
            continue;
        }

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) 
        {
            continue;
        }

		//Bypass certain properties:
		if(bypassFields.Any(f => f == property.PropertyName))
        {
			continue;
		}
#>

<div class="form-group">            
<#
        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property, RelatedModels) #>", htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
<#
        } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
<#
        }
#>            
	<div class="col-md-10">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
            } 
        } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<# 
        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }        
#>
    </div>
</div>    
<#  
}
#>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>